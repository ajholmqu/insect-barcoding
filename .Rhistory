p6 %>%
ggplot(aes(incubation_length)) +
geom_bar(aes(fill = success))
p6 %>%
ggplot(aes(dimer)) +
geom_bar(aes(fill = success))
p6 %>%
ggplot(aes(incubation_length)) +
geom_bar(aes(fill = dimer))
p6 %>%
ggplot(aes(Family)) +
geom_bar(aes(fill = success))
p6 %>%
ggplot(aes(Family)) +
geom_bar(aes(fill = success), position = "dodge")
p6$date <- as.Date(p6$Date, format = "%m/%d/%y")
breaks <- seq(as.Date("1900-01-01"), Sys.Date(), by = "10 years")
p6 <- left_join(extracts, serpa_meta,
by = c("catalog" = "Catalog")) %>%
filter(plate == "P6")
p6$date <- as.Date(p6$Date, format = "%m/%d/%y")
breaks <- seq(as.Date("1900-01-01"), Sys.Date(), by = "10 years")
p6$decade <- cut(p6$Date, breaks = breaks,
labels = paste(year(breaks[-length(breaks)]), "-", year(breaks[-1]) - 1, sep = ""), right = FALSE)
breaks
p6 <- left_join(extracts, serpa_meta,
by = c("catalog" = "Catalog")) %>%
filter(plate == "P6")
p6$Date <- as.Date(p6$Date, format = "%m/%d/%y")
breaks <- seq(as.Date("1900-01-01"), Sys.Date(), by = "10 years")
p6$decade <- cut(p6$Date, breaks = breaks,
labels = paste(year(breaks[-length(breaks)]), "-", year(breaks[-1]) - 1, sep = ""), right = FALSE)
p6 <-
p6 %>%
mutate(success = ifelse(well %in% success, "y", "n"),
dimer = ifelse(well %in% no_dimer, "n", "y")) %>%
select(catalog, incubation_length, Family, Genus, Species,
Date, decade, Lifestage, success, dimer)
p6 %>%
ggplot(aes(decade)) +
geom_bar(aes(fill = success))
p6 %>%
ggplot(aes(decade)) +
geom_bar(aes(fill = success),position = "fill")
#plating <- read.csv(paste0(folder,"plating.csv"))
pcr <- read.csv(paste0(folder, "pcr.csv"))
pcr %>%
group_by(catalog, band) %>%
summarise(n()) %>%
filter(catalog != "") %>%
ungroup() %>%
group_by(band) %>%
summarise(n())
pcr %>%
filter(band == "y") %>%
summarise(n_distinct(catalog))
length(unique(pcr$catalog))
568/1408
View(joined_df)
knitr::opts_chunk$set(echo = TRUE)
spiders <- read.csv("Documents/se_asia_biodiversity/species_export_20240109.csv")
View(spiders)
countries <- c("Indonesia", "Malaysia", "India", "Thailand", "Myanmar",
"Brunei", "Timor", "Papua", "Vietnam", "Cambodia", "Philippines",
"Hainan", "Bangladesh", "Bhutan")
View(spiders)
spiders %>%
filter(str_detect(distribution, paste(countries, collapse = "|")))
library(tidyverse)
spiders %>%
filter(str_detect(distribution, paste(countries, collapse = "|")))
countries <- c("Indonesia", "Malaysia", "India", "Thailand", "Myanmar",
"Brunei", "Timor", "Papua", "Vietnam", "Cambodia", "Philippines",
"Hainan", "Bangladesh", "Bhutan", "Laos")
spiders %>%
filter(str_detect(distribution, paste(countries, collapse = "|")))
spiders_by_country <-
spiders %>%
filter(str_detect(distribution, paste(countries, collapse = "|")))
spiders_by_country %>%
ggplot(aes(year)) %>%
geom_histogram()
spiders_by_country %>%
ggplot(aes(year)) +
geom_histogram()
spiders_by_country$CumulativeCount <- cumsum(rep(1, nrow(spiders_by_country)))
View(spiders_by_country)
spiders_by_country <-
spiders %>%
filter(str_detect(distribution, paste(countries, collapse = "|"))) %>%
arrange(year)
View(spiders_by_country)
spiders_by_country$CumulativeCount <- cumsum(rep(1, nrow(spiders_by_country)))
spiders_by_country %>%
ggplot(aes(year, CumulativeCount)) %>%
geom_point()
spiders_by_country %>%
ggplot(aes(year, CumulativeCount)) +
geom_smooth()
spiders_by_country %>%
ggplot(aes(year, CumulativeCount)) +
geom_smooth() +
theme_minimal()
spiders_by_country %>%
ggplot(aes(year, CumulativeCount)) +
geom_smooth(color = "black") +
theme_minimal()
spiders_by_country %>%
ggplot(aes(year)) +
geom_histogram() +
theme_minimal()
spiders_by_country %>%
ggplot(aes(year, CumulativeCount)) +
geom_smooth(color = "black") +
theme_minimal()
spiders_by_country %>%
ggplot(aes(year)) +
geom_histogram() +
theme_minimal()
spiders %>% filter(grepl("China", distribution))
spiders %>% filter(grepl("China", distribution)) -> china
View(china)
df %>% filter(plate == "P13") -> p13
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
knitr::opts_chunk$set(echo = TRUE)
df %>% filter(plate == "P13") -> p13
df %>% filter(plate == "P13")
df %>% filter(plate == "P13")
df
# Join
df <-
pcr %>%
select(-catalog) %>%
left_join(plating, by = c("plate", "well")) %>%
filter(primer_r %in% c("CFMRb", "HCO") & primer_f == "LCO") %>%
left_join(nanodrop, by = c("catalog", "plate", "well")) %>%
left_join(serpa, by = "catalog") %>%
mutate(date = as.Date(Date, format = "%m/%d/%y"))
# CSVs
plating <- read.csv("data_sheets/plating.csv")
nanodrop <- read.csv("data_sheets/nanodrop.csv")
pcr <- read.csv("data_sheets/pcr.csv")
serpa <- read.csv("data_sheets/serpa_metadata.csv") %>%
filter(X != "") %>%
rename(catalog = X)
# Join
df <-
pcr %>%
select(-catalog) %>%
left_join(plating, by = c("plate", "well")) %>%
filter(primer_r %in% c("CFMRb", "HCO") & primer_f == "LCO") %>%
left_join(nanodrop, by = c("catalog", "plate", "well")) %>%
left_join(serpa, by = "catalog") %>%
mutate(date = as.Date(Date, format = "%m/%d/%y"))
# Unflagged
df_unflagged <- df %>%
filter(flag != "y")
df %>% filter(plate == "P13")
df %>% filter(plate == "P13") -> p13
View(p13)
p13 %>% filter(!is.na(date)) %>% summarize(mean(date))
p13 %>% filter(!is.na(date)) %>% summarize(median(date))
p13 %>% group_by(band) %>% summarize(n())
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir =  "/Users/aholmquist/Documents/GitHub/sulawesi/spiders/data/")
library(VennDiagram)
# sOTUs
dk_sotu <-
final_df_clustered %>%
filter(mountain_letter == "DK") %>%
filter(threshold == "sOTU") %>%
distinct(cluster) %>%
pull()
library(tidyverse)
library(reshape2)
library(ggpubr)
library(kmer)
library(ape)
library(vegan)
library(rstatix)
library(VennDiagram)
library(ggtree)
library(treeio)
library(BAT)
library(Biostrings)
library(pegas)
library(ComplexHeatmap)
# sOTUs
dk_sotu <-
final_df_clustered %>%
filter(mountain_letter == "DK") %>%
filter(threshold == "sOTU") %>%
distinct(cluster) %>%
pull()
tpp_sotu <-
final_df_clustered %>%
filter(mountain_letter == "TPP") %>%
filter(threshold == "sOTU") %>%
distinct(cluster) %>%
pull()
gor_sotu <-
final_df_clustered %>%
filter(mountain_letter == "GOR") %>%
filter(threshold == "sOTU") %>%
distinct(cluster) %>%
pull()
venn.diagram(list("Dako" = dk_sotu,
"Ilomata" = gor_sotu,
"Torompupu" = tpp_sotu),
fill = mountain_palette,
fontfamily = "sans",
cat.fontfamily = "sans",
"sotu_venn.png")
mountain_palette <- c("#BAAD8D", "#92D3DC", "#93D07D")
venn.diagram(list("Dako" = dk_sotu,
"Ilomata" = gor_sotu,
"Torompupu" = tpp_sotu),
fill = mountain_palette,
fontfamily = "sans",
cat.fontfamily = "sans",
"sotu_venn.png")
getwd()
?venn.diagram
venn.diagram(list("Dako" = dk_sotu,
"Ilomata" = gor_sotu,
"Torompupu" = tpp_sotu),
fill = mountain_palette,
fontfamily = "sans",
cat.fontfamily = "sans",
resolution = 500,
"sotu_venn.png")
venn.diagram(list("Dako" = dk_sotu,
"Ilomata" = gor_sotu,
"Torompupu" = tpp_sotu),
fill = mountain_palette,
fontfamily = "sans",
cat.fontfamily = "sans",
resolution = 100,
"sotu_venn.png")
venn.diagram(list("Dako" = dk_sotu,
"Ilomata" = gor_sotu,
"Torompupu" = tpp_sotu),
fill = mountain_palette,
fontfamily = "sans",
cat.fontfamily = "sans",
resolution = 700,
"sotu_venn.png")
venn.diagram(list("Dako" = dk_sotu,
"Ilomata" = gor_sotu,
"Torompupu" = tpp_sotu),
fill = mountain_palette,
fontfamily = "sans",
cat.fontfamily = "sans",
resolution = 800,
"sotu_venn.png")
# 97%
dk_97 <-
final_df_clustered %>%
filter(mountain_letter == "DK") %>%
filter(threshold == "0.97") %>%
distinct(cluster) %>%
pull()
tpp_97 <-
final_df_clustered %>%
filter(mountain_letter == "TPP") %>%
filter(threshold == "0.97") %>%
distinct(cluster) %>%
pull()
gor_97 <-
final_df_clustered %>%
filter(mountain_letter == "GOR") %>%
filter(threshold == "0.97") %>%
distinct(cluster) %>%
pull()
venn.diagram(list("Dako" = dk_sotu,
"Ilomata" = gor_sotu,
"Torompupu" = tpp_sotu),
resolution = 800,
fontfamily = "sans",
cat.fontfamily = "sans",
fill = mountain_palette,
cex = 0.8,
cat.cex = 0.8,
"97_venn.png")
venn.diagram(list("Dako" = dk_sotu,
"Ilomata" = gor_sotu,
"Torompupu" = tpp_sotu),
resolution = 700,
fontfamily = "sans",
cat.fontfamily = "sans",
fill = mountain_palette,
cex = 0.8,
cat.cex = 0.8,
"97_venn.png")
venn.diagram(list("Dako" = dk_sotu,
"Ilomata" = gor_sotu,
"Torompupu" = tpp_sotu),
resolution = 900,
fontfamily = "sans",
cat.fontfamily = "sans",
fill = mountain_palette,
cex = 0.8,
cat.cex = 0.8,
"sotu_venn.png")
venn.diagram(list("Dako" = dk_97,
"Ilomata" = gor_97,
"Torompupu" = tpp_97),
resolution = 800,
fontfamily = "sans",
cat.fontfamily = "sans",
fill = mountain_palette,
cex = 0.8,
cat.cex = 0.8,
"97_venn.png")
venn.diagram(list("Dako" = dk_97,
"Ilomata" = gor_97,
"Torompupu" = tpp_97),
resolution = 900,
fontfamily = "sans",
cat.fontfamily = "sans",
fill = mountain_palette,
cex = 0.8,
cat.cex = 0.8,
"97_venn.png")
venn.diagram(list("Dako" = dk_95,
"Ilomata" = gor_95,
"Torompupu" = tpp_95),
resolution = 900,
fill = mountain_palette,
fontfamily = "sans",
cat.fontfamily = "sans",
cex = 0.8,
cat.cex = 0.8,
"95_venn.png")
# 95%
dk_95 <-
final_df_clustered %>%
filter(mountain_letter == "DK") %>%
filter(threshold == "0.95") %>%
distinct(cluster) %>%
pull()
tpp_95 <-
final_df_clustered %>%
filter(mountain_letter == "TPP") %>%
filter(threshold == "0.95") %>%
distinct(cluster) %>%
pull()
gor_95 <-
final_df_clustered %>%
filter(mountain_letter == "GOR") %>%
filter(threshold == "0.95") %>%
distinct(cluster) %>%
pull()
venn.diagram(list("Dako" = dk_95,
"Ilomata" = gor_95,
"Torompupu" = tpp_95),
resolution = 900,
fill = mountain_palette,
fontfamily = "sans",
cat.fontfamily = "sans",
cex = 0.8,
cat.cex = 0.8,
"95_venn.png")
getwd()
mat_sotu <-
final_df_clustered %>%
filter(threshold == "sOTU") %>%
mutate(site_combo =
paste0(mountain, " (",
elev_grouping_1,")")) %>%
group_by(site_combo, cluster) %>%
summarise(n = n_distinct(sample)) %>%
acast(site_combo ~ cluster, fill = 0)
mat_97 <-
final_df_clustered %>%
filter(threshold == "0.97") %>%
mutate(site_combo =
paste0(mountain, " (",
elev_grouping_1,")")) %>%
group_by(site_combo, cluster) %>%
summarise(n = n_distinct(sample)) %>%
acast(site_combo ~ cluster, fill = 0)
mat_95 <-
final_df_clustered %>%
filter(threshold == "0.95") %>%
mutate(site_combo =
paste0(mountain, " (",
elev_grouping_1,")")) %>%
group_by(site_combo, cluster) %>%
summarise(n = n_distinct(sample)) %>%
acast(site_combo ~ cluster, fill = 0)
library("ggdendro")
dend_sotu <- as.dendrogram(hclust(
vegdist(mat_sotu, method = "bray"),
method = "average")) # UPGMA
dend_97 <- hclust(vegdist(mat_97, method = "bray"),
method = "average") # UPGMA
dend_95 <- hclust(vegdist(mat_95, method = "bray"),
method = "average") # UPGMA
dend_data_sotu <- dendro_data(dend_sotu)
dend_plot_sotu <-
dend_data_sotu$segments %>%
mutate(new_end = ifelse(yend == 0, 0.3, yend)) %>%
ggplot() +
geom_segment(aes(x = x, y = y,
xend = xend, yend = new_end), linewidth = 0.3) +
coord_flip() +
geom_text(data = dend_data_sotu$labels,
aes(x, y = 0.15,
label = label), size = 2) +
ylim(0.05, 1) +
theme_dendro()
dend_data_97 <- dendro_data(dend_97)
dend_plot_97 <-
dend_data_97$segments %>%
mutate(new_end = ifelse(yend == 0, 0.3, yend)) %>%
ggplot() +
geom_segment(aes(x = x, y = y,
xend = xend, yend = new_end), linewidth = 0.3) +
coord_flip() +
geom_text(data = dend_data_97$labels,
aes(x, y = 0.15,
label = label),
size = 2) +
ylim(0.05, 1) +
theme_dendro()
dend_data_95 <- dendro_data(dend_95)
dend_plot_95 <-
dend_data_95$segments %>%
mutate(new_end = ifelse(yend == 0, 0.3, yend)) %>%
ggplot() +
geom_segment(aes(x = x, y = y,
xend = xend, yend = new_end), linewidth = 0.3) +
coord_flip() +
geom_text(data = dend_data_95$labels,
aes(x, y = 0.15,
label = label),
size = 2) +
ylim(0.05, 0.9) +
theme_dendro()
dend_arranged <-
ggarrange(dend_plot_sotu, dend_plot_97, dend_plot_95,
ncol = 3, nrow = 1)
dend_plot_95
dend_plot_97
setwd("/Users/aholmquist/Documents/github/insect-barcoding")
pcr_success <- read.csv("data/pcr.csv")
library(tidyverse)
librarY
pcr_cleaned <-
pcr_success %>%
# Didn't need these columns
select(-X, -evaporated, -primers) %>%
mutate(primer_pair = paste0(primer_f, "_", primer_r), # Created clean primer pair
band = case_when( # Standardized band calls
band == "Y" ~ "y",
band == "y" ~ "y",
TRUE ~ "n"),
thermocycler = case_when( # Standardized thermocyclers
grepl("2", thermocycler) ~ "#2",
grepl("3", thermocycler) ~ "#3",
grepl("4", thermocycler) ~ "#4",
grepl("5", thermocycler) ~ "#5",
grepl("6", thermocycler) ~ "#6",
TRUE ~ "?"
),
date = as.Date(date, "%m/%d/%Y")) %>% # Fixed data formating to allow ordering by date
group_by(plate) %>%
arrange(date) %>%
mutate(replicate = paste0(plate, "_pcr.v", as.numeric(factor(date)))) %>% # Create replicate column for unique PCR
ungroup()
# I like things a certain way so re-ordered columns this way!
order <- c("catalog", "well", "plate", "letter", "number",
"primer_f", "primer_r", "primer_pair", "replicate",
"date", "thermocycler", "band", "flag", "notes")
# I like things a certain way so re-ordered columns this way!
order <- c("catalog", "well", "plate", "letter", "number",
"primer_f", "primer_r", "primer_pair", "replicate",
"date", "thermocycler", "band", "flag", "notes")
pcr_cleaned <-
pcr_cleaned %>%
# Used select and the order list to re-order
select(all_of(order)) %>%
# Didn't want fly test on there
filter(!plate %in% c("Fly 1", "Fly 2")) %>%
# Below three lines were for a subset of columns that were true duplicates (same band called)
dplyr::group_by(catalog, well, plate, letter, number, primer_f, primer_r,
replicate, date, thermocycler,
flag, notes, primer_pair, band) %>%
filter(row_number() == 1) %>%
ungroup()
# This is the step to pivot long to wide
pcr_pivot <-
pcr_cleaned %>%
# Pivoting on one column, so need to remove these unique identifiers
select(-primer_f, -primer_r) %>%
# We didn't need all those primers anymore so selected only relevant
filter(primer_pair %in% c("LCO_HCO", "LCO_CFMRb", "fwhF2_fwhR2", "fwhF2_HCO", "AJHFwd1_dR")) %>%
# Pivot function - column from which you will get your new columns, and the column with the values
pivot_wider(names_from = primer_pair, values_from = band)
View(pcr_pivot)
# Number of barcodes ready
pcr_pivot %>%
filter(LCO_CFMRb == "y" | LCO_HCO == "y")
# Number of barcodes ready
pcr_pivot %>%
filter(LCO_CFMRb == "y" | LCO_HCO == "y") %>%
group_by(catalog) %>%
filter(row_number() == 1) %>%
ungroup() %>%
summarise(n_distinct(catalog))
